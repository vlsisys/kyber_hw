
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060)


-- Running command `read_verilog parse.v ; hierarchy -check; synth;' --

1. Executing Verilog-2005 frontend: parse.v
Parsing Verilog input from `parse.v' to AST representation.
Generating RTLIL representation for module `\parse'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$parse.v:358$123 in module parse.
Marked 2 switch rules as full_case in process $proc$parse.v:304$121 in module parse.
Marked 2 switch rules as full_case in process $proc$parse.v:235$119 in module parse.
Marked 1 switch rules as full_case in process $proc$parse.v:202$118 in module parse.
Marked 2 switch rules as full_case in process $proc$parse.v:190$116 in module parse.
Marked 3 switch rules as full_case in process $proc$parse.v:155$89 in module parse.
Marked 1 switch rules as full_case in process $proc$parse.v:129$65 in module parse.
Marked 1 switch rules as full_case in process $proc$parse.v:94$16 in module parse.
Marked 1 switch rules as full_case in process $proc$parse.v:64$14 in module parse.
Marked 1 switch rules as full_case in process $proc$parse.v:57$13 in module parse.
Marked 1 switch rules as full_case in process $proc$parse.v:45$3 in module parse.
Marked 1 switch rules as full_case in process $proc$parse.v:36$1 in module parse.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 6 redundant assignments.
Promoted 13 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \i_rstn in `\parse.$proc$parse.v:358$123'.
Found async reset \i_rstn in `\parse.$proc$parse.v:304$121'.
Found async reset \i_rstn in `\parse.$proc$parse.v:235$119'.
Found async reset \i_rstn in `\parse.$proc$parse.v:190$116'.
Found async reset \i_rstn in `\parse.$proc$parse.v:155$89'.
Found async reset \i_rstn in `\parse.$proc$parse.v:36$1'.

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~12 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\parse.$proc$parse.v:358$123'.
     1/1: $0\cnt_coeff[6:0]
Creating decoders for process `\parse.$proc$parse.v:304$121'.
     1/2: $0\o_coeffs_valid[0:0]
     2/2: $0\o_coeffs[47:0]
Creating decoders for process `\parse.$proc$parse.v:235$119'.
     1/3: $0\coeffs_reg[35:0] [35:24]
     2/3: $0\coeffs_reg[35:0] [11:0]
     3/3: $0\coeffs_reg[35:0] [23:12]
Creating decoders for process `\parse.$proc$parse.v:202$118'.
     1/1: $1\n_state_cff[1:0]
Creating decoders for process `\parse.$proc$parse.v:190$116'.
     1/1: $0\c_state_cff[1:0]
Creating decoders for process `\parse.$proc$parse.v:155$89'.
     1/1: $0\cnt_loop[7:0]
Creating decoders for process `\parse.$proc$parse.v:129$65'.
     1/4: $1\d2_if_1[0:0]
     2/4: $1\d1_if_1[0:0]
     3/4: $1\d2_if_0[0:0]
     4/4: $1\d1_if_0[0:0]
Creating decoders for process `\parse.$proc$parse.v:94$16'.
     1/4: $1\d2_1[11:0]
     2/4: $1\d1_1[11:0]
     3/4: $1\d2_0[11:0]
     4/4: $1\d1_0[11:0]
Creating decoders for process `\parse.$proc$parse.v:78$15'.
Creating decoders for process `\parse.$proc$parse.v:64$14'.
     1/1: $1\o_ibytes_ready[0:0]
Creating decoders for process `\parse.$proc$parse.v:57$13'.
     1/1: $1\o_done[0:0]
Creating decoders for process `\parse.$proc$parse.v:45$3'.
     1/1: $1\n_state[2:0]
Creating decoders for process `\parse.$proc$parse.v:36$1'.
     1/1: $0\c_state[2:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\parse.\n_state_cff' from process `\parse.$proc$parse.v:202$118': $auto$proc_dlatch.cc:427:proc_dlatch$486
No latch inferred for signal `\parse.\d1_if_0' from process `\parse.$proc$parse.v:129$65'.
No latch inferred for signal `\parse.\d2_if_0' from process `\parse.$proc$parse.v:129$65'.
No latch inferred for signal `\parse.\d1_if_1' from process `\parse.$proc$parse.v:129$65'.
No latch inferred for signal `\parse.\d2_if_1' from process `\parse.$proc$parse.v:129$65'.
No latch inferred for signal `\parse.\d1_0' from process `\parse.$proc$parse.v:94$16'.
No latch inferred for signal `\parse.\d2_0' from process `\parse.$proc$parse.v:94$16'.
No latch inferred for signal `\parse.\d1_1' from process `\parse.$proc$parse.v:94$16'.
No latch inferred for signal `\parse.\d2_1' from process `\parse.$proc$parse.v:94$16'.
No latch inferred for signal `\parse.\o_ibytes_ready' from process `\parse.$proc$parse.v:64$14'.
No latch inferred for signal `\parse.\o_done' from process `\parse.$proc$parse.v:57$13'.
Latch inferred for signal `\parse.\n_state' from process `\parse.$proc$parse.v:45$3': $auto$proc_dlatch.cc:427:proc_dlatch$527

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\parse.\cnt_coeff' using process `\parse.$proc$parse.v:358$123'.
  created $adff cell `$procdff$528' with positive edge clock and negative level reset.
Creating register for signal `\parse.\o_coeffs' using process `\parse.$proc$parse.v:304$121'.
  created $adff cell `$procdff$529' with positive edge clock and negative level reset.
Creating register for signal `\parse.\o_coeffs_valid' using process `\parse.$proc$parse.v:304$121'.
  created $adff cell `$procdff$530' with positive edge clock and negative level reset.
Creating register for signal `\parse.\coeffs_reg' using process `\parse.$proc$parse.v:235$119'.
  created $adff cell `$procdff$531' with positive edge clock and negative level reset.
Creating register for signal `\parse.\c_state_cff' using process `\parse.$proc$parse.v:190$116'.
  created $adff cell `$procdff$532' with positive edge clock and negative level reset.
Creating register for signal `\parse.\cnt_loop' using process `\parse.$proc$parse.v:155$89'.
  created $adff cell `$procdff$533' with positive edge clock and negative level reset.
Creating register for signal `\parse.\ibytes_reg' using process `\parse.$proc$parse.v:78$15'.
  created $dff cell `$procdff$534' with positive edge clock.
Creating register for signal `\parse.\c_state' using process `\parse.$proc$parse.v:36$1'.
  created $adff cell `$procdff$535' with positive edge clock and negative level reset.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\parse.$proc$parse.v:358$123'.
Removing empty process `parse.$proc$parse.v:358$123'.
Found and cleaned up 1 empty switch in `\parse.$proc$parse.v:304$121'.
Removing empty process `parse.$proc$parse.v:304$121'.
Found and cleaned up 1 empty switch in `\parse.$proc$parse.v:235$119'.
Removing empty process `parse.$proc$parse.v:235$119'.
Found and cleaned up 1 empty switch in `\parse.$proc$parse.v:202$118'.
Removing empty process `parse.$proc$parse.v:202$118'.
Found and cleaned up 1 empty switch in `\parse.$proc$parse.v:190$116'.
Removing empty process `parse.$proc$parse.v:190$116'.
Found and cleaned up 2 empty switches in `\parse.$proc$parse.v:155$89'.
Removing empty process `parse.$proc$parse.v:155$89'.
Found and cleaned up 1 empty switch in `\parse.$proc$parse.v:129$65'.
Removing empty process `parse.$proc$parse.v:129$65'.
Found and cleaned up 1 empty switch in `\parse.$proc$parse.v:94$16'.
Removing empty process `parse.$proc$parse.v:94$16'.
Removing empty process `parse.$proc$parse.v:78$15'.
Found and cleaned up 1 empty switch in `\parse.$proc$parse.v:64$14'.
Removing empty process `parse.$proc$parse.v:64$14'.
Found and cleaned up 1 empty switch in `\parse.$proc$parse.v:57$13'.
Removing empty process `parse.$proc$parse.v:57$13'.
Found and cleaned up 1 empty switch in `\parse.$proc$parse.v:45$3'.
Removing empty process `parse.$proc$parse.v:45$3'.
Removing empty process `parse.$proc$parse.v:36$1'.
Cleaned up 12 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.
<suppressed ~45 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.
<suppressed ~50 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..
Removed 8 unused cells and 122 unused wires.
<suppressed ~17 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module parse...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.
<suppressed ~1 debug messages>

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
<suppressed ~399 debug messages>
Removed a total of 133 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \parse..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \parse.
    New ctrl vector for $pmux cell $procmux$166: { $procmux$164_CMP $procmux$163_CMP $procmux$162_CMP $procmux$161_CMP $auto$opt_reduce.cc:134:opt_pmux$549 $procmux$158_CMP $procmux$157_CMP $procmux$155_CMP $auto$opt_reduce.cc:134:opt_pmux$547 $auto$opt_reduce.cc:134:opt_pmux$545 $auto$opt_reduce.cc:134:opt_pmux$543 $procmux$147_CMP $auto$opt_reduce.cc:134:opt_pmux$541 $auto$opt_reduce.cc:134:opt_pmux$539 $auto$opt_reduce.cc:134:opt_pmux$537 }
    New ctrl vector for $pmux cell $procmux$200: { $auto$opt_reduce.cc:134:opt_pmux$557 $auto$opt_reduce.cc:134:opt_pmux$555 $auto$opt_reduce.cc:134:opt_pmux$553 $auto$opt_reduce.cc:134:opt_pmux$551 }
    New ctrl vector for $pmux cell $procmux$233: { $auto$opt_reduce.cc:134:opt_pmux$563 $auto$opt_reduce.cc:134:opt_pmux$561 $procmux$235_CMP $auto$opt_reduce.cc:134:opt_pmux$559 }
    New ctrl vector for $pmux cell $procmux$250: { $auto$opt_reduce.cc:134:opt_pmux$571 $auto$opt_reduce.cc:134:opt_pmux$569 $auto$opt_reduce.cc:134:opt_pmux$567 $auto$opt_reduce.cc:134:opt_pmux$565 }
    New ctrl vector for $pmux cell $procmux$278: { $auto$opt_reduce.cc:134:opt_pmux$577 $auto$opt_reduce.cc:134:opt_pmux$575 $auto$opt_reduce.cc:134:opt_pmux$573 }
    New ctrl vector for $pmux cell $procmux$304: { $procmux$308_CMP $procmux$307_CMP $procmux$306_CMP $procmux$305_CMP }
    New ctrl vector for $pmux cell $procmux$132: $auto$opt_reduce.cc:134:opt_pmux$579
    New ctrl vector for $pmux cell $procmux$355: { $procmux$311_CMP [0] $procmux$311_CMP [1] $procmux$311_CMP [2] $procmux$311_CMP [3] $eq$parse.v:153$83_Y }
  Optimizing cells in module \parse.
Performed a total of 8 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..
Removed 2 unused cells and 121 unused wires.
<suppressed ~3 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \parse..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \parse.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \parse..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \parse.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$533 ($adff) from module parse (D = $0\cnt_loop[7:0], Q = \cnt_loop).
Adding EN signal on $procdff$531 ($adff) from module parse (D = $0\coeffs_reg[35:0] [11:0], Q = \coeffs_reg [11:0]).
Adding EN signal on $procdff$531 ($adff) from module parse (D = $0\coeffs_reg[35:0] [23:12], Q = \coeffs_reg [23:12]).
Adding EN signal on $procdff$531 ($adff) from module parse (D = $0\coeffs_reg[35:0] [35:24], Q = \coeffs_reg [35:24]).
Adding EN signal on $procdff$529 ($adff) from module parse (D = $0\o_coeffs[47:0], Q = \o_coeffs).
Adding EN signal on $procdff$528 ($adff) from module parse (D = $0\cnt_coeff[6:0], Q = \cnt_coeff).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.
<suppressed ~5 debug messages>

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \parse..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \parse.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from mux cell parse.$ternary$parse.v:47$4 ($mux).
Removed top 1 bits (of 7) from port B of cell parse.$eq$parse.v:48$5 ($eq).
Removed top 2 bits (of 3) from mux cell parse.$ternary$parse.v:50$10 ($mux).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:97$19 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:97$19 ($add).
Removed top 28 bits (of 32) from port A of cell parse.$add$parse.v:98$22 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:98$22 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:98$22 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:99$25 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:99$25 ($add).
Removed top 28 bits (of 32) from port A of cell parse.$add$parse.v:100$28 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:100$28 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:100$28 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:103$31 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:103$31 ($add).
Removed top 28 bits (of 32) from port A of cell parse.$add$parse.v:104$34 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:104$34 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:104$34 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:105$37 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:105$37 ($add).
Removed top 28 bits (of 32) from port A of cell parse.$add$parse.v:106$40 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:106$40 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:106$40 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:109$43 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:109$43 ($add).
Removed top 28 bits (of 32) from port A of cell parse.$add$parse.v:110$46 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:110$46 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:110$46 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:111$49 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:111$49 ($add).
Removed top 28 bits (of 32) from port A of cell parse.$add$parse.v:112$52 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:112$52 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:112$52 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:115$55 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:115$55 ($add).
Removed top 28 bits (of 32) from port A of cell parse.$add$parse.v:116$58 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:116$58 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:116$58 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:117$61 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:117$61 ($add).
Removed top 28 bits (of 32) from port A of cell parse.$add$parse.v:118$64 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$add$parse.v:118$64 ($add).
Removed top 20 bits (of 32) from port Y of cell parse.$add$parse.v:118$64 ($add).
Removed top 20 bits (of 32) from port B of cell parse.$lt$parse.v:135$66 ($lt).
Removed top 31 bits (of 32) from mux cell parse.$ternary$parse.v:135$67 ($mux).
Removed top 20 bits (of 32) from port B of cell parse.$lt$parse.v:136$68 ($lt).
Removed top 23 bits (of 32) from port Y of cell parse.$add$parse.v:136$69 ($add).
Removed top 23 bits (of 32) from port A of cell parse.$lt$parse.v:136$70 ($lt).
Removed top 23 bits (of 32) from port B of cell parse.$lt$parse.v:136$70 ($lt).
Removed top 31 bits (of 32) from mux cell parse.$ternary$parse.v:136$72 ($mux).
Removed top 20 bits (of 32) from port B of cell parse.$lt$parse.v:137$73 ($lt).
Removed top 31 bits (of 32) from mux cell parse.$ternary$parse.v:137$74 ($mux).
Removed top 20 bits (of 32) from port B of cell parse.$lt$parse.v:138$75 ($lt).
Removed top 23 bits (of 32) from port A of cell parse.$add$parse.v:138$77 ($add).
Removed top 22 bits (of 32) from port Y of cell parse.$add$parse.v:138$77 ($add).
Removed top 22 bits (of 32) from port A of cell parse.$add$parse.v:138$78 ($add).
Removed top 21 bits (of 32) from port Y of cell parse.$add$parse.v:138$78 ($add).
Removed top 21 bits (of 32) from port A of cell parse.$lt$parse.v:138$79 ($lt).
Removed top 23 bits (of 32) from port B of cell parse.$lt$parse.v:138$79 ($lt).
Removed top 31 bits (of 32) from mux cell parse.$ternary$parse.v:138$81 ($mux).
Removed top 30 bits (of 32) from port Y of cell parse.$add$parse.v:153$85 ($add).
Removed top 30 bits (of 32) from port A of cell parse.$add$parse.v:153$86 ($add).
Removed top 29 bits (of 32) from port Y of cell parse.$add$parse.v:153$86 ($add).
Removed top 29 bits (of 32) from port A of cell parse.$add$parse.v:153$87 ($add).
Removed top 28 bits (of 32) from port Y of cell parse.$add$parse.v:153$87 ($add).
Removed top 29 bits (of 32) from mux cell parse.$ternary$parse.v:153$88 ($mux).
Removed top 31 bits (of 32) from port B of cell parse.$add$parse.v:166$96 ($add).
Removed top 23 bits (of 32) from port Y of cell parse.$add$parse.v:166$96 ($add).
Removed top 23 bits (of 32) from port A of cell parse.$le$parse.v:166$97 ($le).
Removed top 24 bits (of 32) from port B of cell parse.$le$parse.v:166$97 ($le).
Removed top 24 bits (of 32) from mux cell parse.$ternary$parse.v:166$100 ($mux).
Removed top 30 bits (of 32) from port B of cell parse.$add$parse.v:167$101 ($add).
Removed top 23 bits (of 32) from port Y of cell parse.$add$parse.v:167$101 ($add).
Removed top 23 bits (of 32) from port A of cell parse.$le$parse.v:167$102 ($le).
Removed top 24 bits (of 32) from port B of cell parse.$le$parse.v:167$102 ($le).
Removed top 24 bits (of 32) from mux cell parse.$ternary$parse.v:167$105 ($mux).
Removed top 30 bits (of 32) from port B of cell parse.$add$parse.v:168$106 ($add).
Removed top 23 bits (of 32) from port Y of cell parse.$add$parse.v:168$106 ($add).
Removed top 23 bits (of 32) from port A of cell parse.$le$parse.v:168$107 ($le).
Removed top 24 bits (of 32) from port B of cell parse.$le$parse.v:168$107 ($le).
Removed top 24 bits (of 32) from mux cell parse.$ternary$parse.v:168$110 ($mux).
Removed top 29 bits (of 32) from port B of cell parse.$add$parse.v:169$111 ($add).
Removed top 23 bits (of 32) from port Y of cell parse.$add$parse.v:169$111 ($add).
Removed top 23 bits (of 32) from port A of cell parse.$le$parse.v:169$112 ($le).
Removed top 24 bits (of 32) from port B of cell parse.$le$parse.v:169$112 ($le).
Removed top 24 bits (of 32) from mux cell parse.$ternary$parse.v:169$115 ($mux).
Removed top 31 bits (of 32) from port B of cell parse.$add$parse.v:364$125 ($add).
Removed top 24 bits (of 32) from port Y of cell parse.$add$parse.v:364$125 ($add).
Removed top 25 bits (of 32) from mux cell parse.$ternary$parse.v:364$127 ($mux).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$159_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$160_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$161_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$162_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$163_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell parse.$procmux$164_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell parse.$procmux$218_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell parse.$procmux$219_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell parse.$procmux$220_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell parse.$procmux$221_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell parse.$procmux$222_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell parse.$procmux$223_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell parse.$procmux$224_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell parse.$procmux$225_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell parse.$procmux$226_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell parse.$procmux$227_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell parse.$procmux$228_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell parse.$procmux$229_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell parse.$procmux$230_CMP0 ($eq).
Removed top 5 bits (of 6) from port B of cell parse.$procmux$231_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$239_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$240_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$241_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$242_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$243_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$244_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$263_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$264_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$265_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell parse.$procmux$266_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell parse.$procmux$289_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell parse.$procmux$290_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell parse.$procmux$291_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell parse.$procmux$292_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell parse.$procmux$293_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell parse.$procmux$294_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell parse.$procmux$295_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell parse.$procmux$296_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell parse.$procmux$297_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell parse.$procmux$306_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell parse.$procmux$307_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell parse.$procmux$308_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell parse.$procmux$311_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell parse.$procmux$311_CMP1 ($eq).
Removed top 1 bits (of 3) from port B of cell parse.$procmux$311_CMP2 ($eq).
Removed top 16 bits (of 64) from FF cell parse.$procdff$534 ($dff).
Removed top 1 bits (of 4) from port Y of cell parse.$add$parse.v:153$87 ($add).
Removed top 1 bits (of 8) from port Y of cell parse.$add$parse.v:364$125 ($add).
Removed top 20 bits (of 32) from wire parse.$add$parse.v:100$28_Y.
Removed top 20 bits (of 32) from wire parse.$add$parse.v:104$34_Y.
Removed top 20 bits (of 32) from wire parse.$add$parse.v:106$40_Y.
Removed top 20 bits (of 32) from wire parse.$add$parse.v:110$46_Y.
Removed top 20 bits (of 32) from wire parse.$add$parse.v:112$52_Y.
Removed top 20 bits (of 32) from wire parse.$add$parse.v:116$58_Y.
Removed top 20 bits (of 32) from wire parse.$add$parse.v:118$64_Y.
Removed top 22 bits (of 32) from wire parse.$add$parse.v:138$77_Y.
Removed top 21 bits (of 32) from wire parse.$add$parse.v:138$78_Y.
Removed top 30 bits (of 32) from wire parse.$add$parse.v:153$85_Y.
Removed top 29 bits (of 32) from wire parse.$add$parse.v:153$86_Y.
Removed top 29 bits (of 32) from wire parse.$add$parse.v:153$87_Y.
Removed top 23 bits (of 32) from wire parse.$add$parse.v:166$96_Y.
Removed top 23 bits (of 32) from wire parse.$add$parse.v:167$101_Y.
Removed top 23 bits (of 32) from wire parse.$add$parse.v:168$106_Y.
Removed top 23 bits (of 32) from wire parse.$add$parse.v:169$111_Y.
Removed top 25 bits (of 32) from wire parse.$add$parse.v:364$125_Y.
Removed top 20 bits (of 32) from wire parse.$add$parse.v:97$19_Y.
Removed top 31 bits (of 32) from wire parse.$ternary$parse.v:136$72_Y.
Removed top 31 bits (of 32) from wire parse.$ternary$parse.v:137$74_Y.
Removed top 31 bits (of 32) from wire parse.$ternary$parse.v:138$81_Y.
Removed top 24 bits (of 32) from wire parse.$ternary$parse.v:166$100_Y.
Removed top 24 bits (of 32) from wire parse.$ternary$parse.v:167$105_Y.
Removed top 24 bits (of 32) from wire parse.$ternary$parse.v:168$110_Y.
Removed top 24 bits (of 32) from wire parse.$ternary$parse.v:169$115_Y.
Removed top 25 bits (of 32) from wire parse.$ternary$parse.v:364$127_Y.
Removed top 2 bits (of 3) from wire parse.$ternary$parse.v:47$4_Y.
Removed top 2 bits (of 3) from wire parse.$ternary$parse.v:50$10_Y.
Removed top 16 bits (of 64) from wire parse.ibytes_reg.

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..
Removed 0 unused cells and 30 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module parse:
  creating $macc model for $add$parse.v:100$28 ($add).
  creating $macc model for $add$parse.v:103$31 ($add).
  creating $macc model for $add$parse.v:104$34 ($add).
  creating $macc model for $add$parse.v:105$37 ($add).
  creating $macc model for $add$parse.v:106$40 ($add).
  creating $macc model for $add$parse.v:109$43 ($add).
  creating $macc model for $add$parse.v:110$46 ($add).
  creating $macc model for $add$parse.v:111$49 ($add).
  creating $macc model for $add$parse.v:112$52 ($add).
  creating $macc model for $add$parse.v:115$55 ($add).
  creating $macc model for $add$parse.v:116$58 ($add).
  creating $macc model for $add$parse.v:117$61 ($add).
  creating $macc model for $add$parse.v:118$64 ($add).
  creating $macc model for $add$parse.v:136$69 ($add).
  creating $macc model for $add$parse.v:138$77 ($add).
  creating $macc model for $add$parse.v:138$78 ($add).
  creating $macc model for $add$parse.v:153$85 ($add).
  creating $macc model for $add$parse.v:153$86 ($add).
  creating $macc model for $add$parse.v:153$87 ($add).
  creating $macc model for $add$parse.v:166$96 ($add).
  creating $macc model for $add$parse.v:167$101 ($add).
  creating $macc model for $add$parse.v:168$106 ($add).
  creating $macc model for $add$parse.v:169$111 ($add).
  creating $macc model for $add$parse.v:364$125 ($add).
  creating $macc model for $add$parse.v:97$19 ($add).
  creating $macc model for $add$parse.v:98$22 ($add).
  creating $macc model for $add$parse.v:99$25 ($add).
  merging $macc model for $add$parse.v:153$86 into $add$parse.v:153$87.
  merging $macc model for $add$parse.v:153$85 into $add$parse.v:153$87.
  merging $macc model for $add$parse.v:138$77 into $add$parse.v:138$78.
  creating $alu model for $macc $add$parse.v:364$125.
  creating $alu model for $macc $add$parse.v:169$111.
  creating $alu model for $macc $add$parse.v:168$106.
  creating $alu model for $macc $add$parse.v:167$101.
  creating $alu model for $macc $add$parse.v:166$96.
  creating $alu model for $macc $add$parse.v:97$19.
  creating $alu model for $macc $add$parse.v:98$22.
  creating $alu model for $macc $add$parse.v:138$78.
  creating $alu model for $macc $add$parse.v:99$25.
  creating $alu model for $macc $add$parse.v:136$69.
  creating $alu model for $macc $add$parse.v:118$64.
  creating $alu model for $macc $add$parse.v:117$61.
  creating $alu model for $macc $add$parse.v:116$58.
  creating $alu model for $macc $add$parse.v:115$55.
  creating $alu model for $macc $add$parse.v:112$52.
  creating $alu model for $macc $add$parse.v:111$49.
  creating $alu model for $macc $add$parse.v:110$46.
  creating $alu model for $macc $add$parse.v:109$43.
  creating $alu model for $macc $add$parse.v:106$40.
  creating $alu model for $macc $add$parse.v:105$37.
  creating $alu model for $macc $add$parse.v:104$34.
  creating $alu model for $macc $add$parse.v:103$31.
  creating $alu model for $macc $add$parse.v:100$28.
  creating $macc cell for $add$parse.v:153$87: $auto$alumacc.cc:365:replace_macc$637
  creating $alu model for $le$parse.v:166$97 ($le): new $alu
  creating $alu model for $le$parse.v:167$102 ($le): new $alu
  creating $alu model for $le$parse.v:168$107 ($le): new $alu
  creating $alu model for $le$parse.v:169$112 ($le): new $alu
  creating $alu model for $lt$parse.v:135$66 ($lt): new $alu
  creating $alu model for $lt$parse.v:136$68 ($lt): new $alu
  creating $alu model for $lt$parse.v:136$70 ($lt): new $alu
  creating $alu model for $lt$parse.v:137$73 ($lt): new $alu
  creating $alu model for $lt$parse.v:138$75 ($lt): new $alu
  creating $alu model for $lt$parse.v:138$79 ($lt): new $alu
  creating $alu cell for $lt$parse.v:138$79: $auto$alumacc.cc:485:replace_alu$648
  creating $alu cell for $lt$parse.v:138$75: $auto$alumacc.cc:485:replace_alu$659
  creating $alu cell for $lt$parse.v:137$73: $auto$alumacc.cc:485:replace_alu$664
  creating $alu cell for $lt$parse.v:136$70: $auto$alumacc.cc:485:replace_alu$669
  creating $alu cell for $lt$parse.v:136$68: $auto$alumacc.cc:485:replace_alu$674
  creating $alu cell for $lt$parse.v:135$66: $auto$alumacc.cc:485:replace_alu$679
  creating $alu cell for $le$parse.v:169$112: $auto$alumacc.cc:485:replace_alu$684
  creating $alu cell for $le$parse.v:168$107: $auto$alumacc.cc:485:replace_alu$697
  creating $alu cell for $le$parse.v:167$102: $auto$alumacc.cc:485:replace_alu$710
  creating $alu cell for $le$parse.v:166$97: $auto$alumacc.cc:485:replace_alu$723
  creating $alu cell for $add$parse.v:100$28: $auto$alumacc.cc:485:replace_alu$736
  creating $alu cell for $add$parse.v:103$31: $auto$alumacc.cc:485:replace_alu$739
  creating $alu cell for $add$parse.v:104$34: $auto$alumacc.cc:485:replace_alu$742
  creating $alu cell for $add$parse.v:105$37: $auto$alumacc.cc:485:replace_alu$745
  creating $alu cell for $add$parse.v:106$40: $auto$alumacc.cc:485:replace_alu$748
  creating $alu cell for $add$parse.v:109$43: $auto$alumacc.cc:485:replace_alu$751
  creating $alu cell for $add$parse.v:110$46: $auto$alumacc.cc:485:replace_alu$754
  creating $alu cell for $add$parse.v:111$49: $auto$alumacc.cc:485:replace_alu$757
  creating $alu cell for $add$parse.v:112$52: $auto$alumacc.cc:485:replace_alu$760
  creating $alu cell for $add$parse.v:115$55: $auto$alumacc.cc:485:replace_alu$763
  creating $alu cell for $add$parse.v:116$58: $auto$alumacc.cc:485:replace_alu$766
  creating $alu cell for $add$parse.v:117$61: $auto$alumacc.cc:485:replace_alu$769
  creating $alu cell for $add$parse.v:118$64: $auto$alumacc.cc:485:replace_alu$772
  creating $alu cell for $add$parse.v:136$69: $auto$alumacc.cc:485:replace_alu$775
  creating $alu cell for $add$parse.v:99$25: $auto$alumacc.cc:485:replace_alu$778
  creating $alu cell for $add$parse.v:138$78: $auto$alumacc.cc:485:replace_alu$781
  creating $alu cell for $add$parse.v:98$22: $auto$alumacc.cc:485:replace_alu$784
  creating $alu cell for $add$parse.v:97$19: $auto$alumacc.cc:485:replace_alu$787
  creating $alu cell for $add$parse.v:166$96: $auto$alumacc.cc:485:replace_alu$790
  creating $alu cell for $add$parse.v:167$101: $auto$alumacc.cc:485:replace_alu$793
  creating $alu cell for $add$parse.v:168$106: $auto$alumacc.cc:485:replace_alu$796
  creating $alu cell for $add$parse.v:169$111: $auto$alumacc.cc:485:replace_alu$799
  creating $alu cell for $add$parse.v:364$125: $auto$alumacc.cc:485:replace_alu$802
  created 33 $alu and 1 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.
<suppressed ~2 debug messages>

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \parse..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \parse.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..
Removed 5 unused cells and 15 unused wires.
<suppressed ~6 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \parse..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \parse.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.
<suppressed ~67 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$580 ($adffe) from module parse (D = $0\cnt_loop[7:0] [1], Q = \cnt_loop [1]).
Adding EN signal on $auto$ff.cc:266:slice$580 ($adffe) from module parse (D = $0\cnt_loop[7:0] [0], Q = \cnt_loop [0]).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..
Removed 39 unused cells and 101 unused wires.
<suppressed ~56 debug messages>

3.17.5. Rerunning OPT passes. (Removed registers in this run.)

3.17.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.

3.17.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.17.8. Executing OPT_DFF pass (perform DFF optimizations).

3.17.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.17.10. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \parse..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \parse.
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$900: { $auto$opt_dff.cc:194:make_patterns_logic$890 $auto$opt_dff.cc:194:make_patterns_logic$589 $auto$opt_dff.cc:194:make_patterns_logic$583 $auto$opt_dff.cc:194:make_patterns_logic$897 $auto$opt_dff.cc:194:make_patterns_logic$581 $auto$opt_dff.cc:194:make_patterns_logic$587 $auto$opt_dff.cc:194:make_patterns_logic$585 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$893: { $auto$opt_dff.cc:194:make_patterns_logic$890 $auto$opt_dff.cc:194:make_patterns_logic$589 $auto$opt_dff.cc:194:make_patterns_logic$583 $auto$opt_dff.cc:194:make_patterns_logic$581 $auto$opt_dff.cc:194:make_patterns_logic$587 $auto$opt_dff.cc:194:make_patterns_logic$585 }
    Consolidated identical input bits for $mux cell $ternary$parse.v:48$6:
      Old ports: A=3'010, B=3'101, Y=$ternary$parse.v:48$6_Y
      New ports: A=2'10, B=2'01, Y=$ternary$parse.v:48$6_Y [1:0]
      New connections: $ternary$parse.v:48$6_Y [2] = $ternary$parse.v:48$6_Y [0]
    Consolidated identical input bits for $mux cell $ternary$parse.v:49$8:
      Old ports: A=3'011, B=3'101, Y=$ternary$parse.v:49$8_Y
      New ports: A=2'01, B=2'10, Y=$ternary$parse.v:49$8_Y [2:1]
      New connections: $ternary$parse.v:49$8_Y [0] = 1'1
    Consolidated identical input bits for $mux cell $ternary$parse.v:51$12:
      Old ports: A=3'001, B=3'101, Y=$ternary$parse.v:51$12_Y
      New ports: A=1'0, B=1'1, Y=$ternary$parse.v:51$12_Y [2]
      New connections: $ternary$parse.v:51$12_Y [1:0] = 2'01
  Optimizing cells in module \parse.
Performed a total of 5 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.
<suppressed ~1 debug messages>

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \parse..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \parse.
Performed a total of 0 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.

3.19.18. Rerunning OPT passes. (Maybe there is more to do..)

3.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \parse..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

3.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \parse.
Performed a total of 0 changes.

3.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
Removed a total of 0 cells.

3.19.22. Executing OPT_SHARE pass.

3.19.23. Executing OPT_DFF pass (perform DFF optimizations).

3.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..

3.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.

3.19.26. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$a2af9b43308e3114c3b5dd3f4dc3329b2387395d\_90_alu for cells of type $alu.
Using template $paramod$f28fc3f2e267d7716249e826e8c90c34ca9542c1\_90_alu for cells of type $alu.
Using template $paramod$adbaf76fa5a3091a329503792521395f8ff4d1a4\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$dc24062c3fd854a070e0ecdecefbe7ab84bd9f07\_90_pmux for cells of type $pmux.
Using template $paramod$ee3d784672cdb1cb32d9a801a3af776716f16b74\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$484d51534650924b7ed4c69e46eed3a56904771f\_90_alu for cells of type $alu.
Using template $paramod$fc972a7a46956c1788f3cb5257b53c8f1df2d0cc\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$0a77e3c00010cb33e399decd813a7380c6e25cba\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$dee3d4f0fa4b4806e8ff2cfc018f7272686163a5\_90_alu for cells of type $alu.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$f021c04f04faa1aed1f8ba82c7ef0f7e43418d00\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $or.
Using template $paramod$8fc04fdd16a9929ec08bc9962c2522fe8f7f851f\_90_alu for cells of type $alu.
Using template $paramod$c654a831025ee805eb993d5880de10a3d616cd3b\_90_pmux for cells of type $pmux.
Using extmapper maccmap for cells of type $macc.
  add bits { \d2_if_0 \d1_if_1 \d2_if_1 \d1_if_0 } (4 bits)
  packed 1 (1) bits / 1 words into adder tree
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $and.
Using template $paramod$56f7ce6d87f8add68ca646dc02d7695a3189f8e5\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001011 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000001 for cells of type $fa.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
No more expansions possible.
<suppressed ~2331 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.
<suppressed ~1260 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
<suppressed ~1809 debug messages>
Removed a total of 603 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..
Removed 132 unused cells and 1956 unused wires.
<suppressed ~133 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\parse' to `<abc-temp-dir>/input.blif'..
Extracted 2812 gates and 2969 wires to a netlist network with 156 inputs and 119 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       26
ABC RESULTS:               XOR cells:       36
ABC RESULTS:              XNOR cells:        7
ABC RESULTS:               NOT cells:       12
ABC RESULTS:              NAND cells:       36
ABC RESULTS:               MUX cells:       94
ABC RESULTS:               NOR cells:       78
ABC RESULTS:                OR cells:      933
ABC RESULTS:             ORNOT cells:       97
ABC RESULTS:            ANDNOT cells:     1264
ABC RESULTS:        internal signals:     2694
ABC RESULTS:           input signals:      156
ABC RESULTS:          output signals:      119
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module parse.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\parse'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \parse..
Removed 0 unused cells and 1064 unused wires.
<suppressed ~10 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.25. Printing statistics.

=== parse ===

   Number of wires:               2491
   Number of wire bits:           2799
   Number of public wires:          16
   Number of public wire bits:     227
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2732
     $_ANDNOT_                    1264
     $_AND_                         26
     $_DFFE_PN0P_                   99
     $_DFF_PN0_                      6
     $_DFF_P_                       48
     $_DLATCH_N_                     5
     $_MUX_                         94
     $_NAND_                        36
     $_NOR_                         69
     $_NOT_                         12
     $_ORNOT_                       97
     $_OR_                         933
     $_XNOR_                         7
     $_XOR_                         36

3.26. Executing CHECK pass (checking for obvious problems).
Checking module parse...
Found and reported 0 problems.

End of script. Logfile hash: a16e5811c3, CPU: user 0.66s system 0.02s, MEM: 32.74 MB peak
Yosys 0.33 (git sha1 2584903a060)
Time spent: 33% 35x opt_expr (0 sec), 13% 1x techmap (0 sec), ...
